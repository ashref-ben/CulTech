{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n    this.isAuthenticated = false;\n    this.baseUrl = 'http://localhost:8070/user/auth'; // Replace with your server URL\n    this.loadAuthenticationState();\n  }\n  loadAuthenticationState() {\n    const storedToken = localStorage.getItem('jwt');\n    if (storedToken) {\n      this.isAuthenticated = true;\n      this.accessToken = storedToken;\n      let decodedJwt = jwtDecode(this.accessToken);\n      this.username = decodedJwt.sub;\n      this.id = decodedJwt.userId;\n      this.roles = decodedJwt.roles;\n      this.redirectBasedOnRoles();\n    }\n  }\n  registerUser(username, password) {\n    const body = {\n      username,\n      password\n    };\n    return this.http.post(`${this.baseUrl}/register`, body, {\n      responseType: 'text'\n    });\n  }\n  loginUser(username, password) {\n    const body = {\n      username,\n      password\n    };\n    return this.http.post(`${this.baseUrl}/login`, body);\n  }\n  loadprofile(data) {\n    this.isAuthenticated = true;\n    this.accessToken = data['jwt'];\n    localStorage.setItem('jwt', this.accessToken);\n    let decodedJwt = jwtDecode(this.accessToken);\n    this.username = decodedJwt.sub;\n    this.id = decodedJwt.userId;\n    this.roles = decodedJwt.roles;\n    console.log(this.roles);\n    this.redirectBasedOnRoles();\n  }\n  redirectBasedOnRoles() {\n    if (this.roles.includes(\"SUPER-ADMIN\")) {\n      this.route.navigateByUrl(\"/super-admin/home\"); // Navigate to admin's home\n    } else if (this.roles.includes(\"USER\")) {\n      this.route.navigateByUrl(\"/user/home\"); // Navigate to user's home\n    } else if (this.roles.includes(\"ADMIN\")) {\n      this.route.navigateByUrl(\"/admin/home\"); // Navigate to user's home\n    } else if (this.roles.includes(\"ORGANIZER\")) {\n      this.route.navigateByUrl(\"/organizer/home\"); // Navigate to user's home\n    } else {\n      this.route.navigateByUrl(\"/guest\"); // Navigate to a default route (for other roles)\n    }\n  }\n\n  logout() {\n    this.isAuthenticated = false;\n    this.accessToken = \"\";\n    this.username = \"\";\n    this.roles = \"\";\n    localStorage.removeItem('jwt'); // Remove the JWT token from local storage\n    this.route.navigateByUrl('/login'); // Redirect to the login page\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,OAAOA,SAAS,MAAM,YAAY;;;;AAKlC,OAAM,MAAOC,WAAW;EAWtBC,YAAoBC,IAAgB,EAAUC,KAAa;IAAvC,SAAI,GAAJD,IAAI;IAAsB,UAAK,GAALC,KAAK;IATnD,oBAAe,GAAY,KAAK;IAOxB,YAAO,GAAG,iCAAiC,CAAC,CAAC;IAGnD,IAAI,CAACC,uBAAuB,EAAE;EAChC;EACAA,uBAAuB;IACrB,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;IAE/C,IAAIF,WAAW,EAAE;MACf,IAAI,CAACG,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACC,WAAW,GAAGJ,WAAW;MAC9B,IAAIK,UAAU,GAAQX,SAAS,CAAC,IAAI,CAACU,WAAW,CAAC;MACjD,IAAI,CAACE,QAAQ,GAAGD,UAAU,CAACE,GAAG;MAC9B,IAAI,CAACC,EAAE,GAAGH,UAAU,CAACI,MAAM;MAC3B,IAAI,CAACC,KAAK,GAAGL,UAAU,CAACK,KAAK;MAC7B,IAAI,CAACC,oBAAoB,EAAE;;EAE/B;EAEAC,YAAY,CAACN,QAAgB,EAAEO,QAAgB;IAC7C,MAAMC,IAAI,GAAG;MAAER,QAAQ;MAAEO;IAAQ,CAAE;IACnC,OAAO,IAAI,CAAChB,IAAI,CAACkB,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,WAAW,EAAEF,IAAI,EAAE;MAAEG,YAAY,EAAE;IAAM,CAAE,CAAC;EACnF;EAEAC,SAAS,CAACZ,QAAgB,EAAEO,QAAgB;IAC1C,MAAMC,IAAI,GAAG;MAAER,QAAQ;MAAEO;IAAQ,CAAE;IACnC,OAAO,IAAI,CAAChB,IAAI,CAACkB,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAEF,IAAI,CAAC;EACtD;EACAK,WAAW,CAACC,IAAS;IACnB,IAAI,CAACjB,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,WAAW,GAAGgB,IAAI,CAAC,KAAK,CAAC;IAC9BnB,YAAY,CAACoB,OAAO,CAAC,KAAK,EAAC,IAAI,CAACjB,WAAW,CAAC;IAC5C,IAAIC,UAAU,GAAQX,SAAS,CAAC,IAAI,CAACU,WAAW,CAAC;IACjD,IAAI,CAACE,QAAQ,GAAGD,UAAU,CAACE,GAAG;IAC9B,IAAI,CAACC,EAAE,GAAGH,UAAU,CAACI,MAAM;IAC3B,IAAI,CAACC,KAAK,GAAGL,UAAU,CAACK,KAAK;IAC7BY,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,KAAK,CAAC;IACvB,IAAI,CAACC,oBAAoB,EAAE;EAC7B;EACQA,oBAAoB;IAC1B,IAAI,IAAI,CAACD,KAAK,CAACc,QAAQ,CAAC,aAAa,CAAC,EAAE;MACtC,IAAI,CAAC1B,KAAK,CAAC2B,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC;KAChD,MAAM,IAAI,IAAI,CAACf,KAAK,CAACc,QAAQ,CAAC,MAAM,CAAC,EAAE;MACtC,IAAI,CAAC1B,KAAK,CAAC2B,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC;KACzC,MAAM,IAAI,IAAI,CAACf,KAAK,CAACc,QAAQ,CAAC,OAAO,CAAC,EAAE;MACvC,IAAI,CAAC1B,KAAK,CAAC2B,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;KAC1C,MAAM,IAAI,IAAI,CAACf,KAAK,CAACc,QAAQ,CAAC,WAAW,CAAC,EAAE;MAC3C,IAAI,CAAC1B,KAAK,CAAC2B,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC;KAC9C,MAAM;MACL,IAAI,CAAC3B,KAAK,CAAC2B,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;;EAExC;;EAEAC,MAAM;IACJ,IAAI,CAACvB,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACE,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACI,KAAK,GAAG,EAAE;IACfT,YAAY,CAAC0B,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IAChC,IAAI,CAAC7B,KAAK,CAAC2B,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;EACtC;;;AArEW9B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiC,SAAXjC,WAAW;EAAAkC,YAFV;AAAM","names":["jwtDecode","AuthService","constructor","http","route","loadAuthenticationState","storedToken","localStorage","getItem","isAuthenticated","accessToken","decodedJwt","username","sub","id","userId","roles","redirectBasedOnRoles","registerUser","password","body","post","baseUrl","responseType","loginUser","loadprofile","data","setItem","console","log","includes","navigateByUrl","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\labid\\Downloads\\CulTech-master\\CulTech-master\\Front\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport jwtDecode from \"jwt-decode\";\nimport { Router } from \"@angular/router\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  isAuthenticated: boolean = false;\n  roles: any;\n  username: any;\n  accessToken!: any;\n  id: any;\n\n\n  private baseUrl = 'http://localhost:8070/user/auth'; // Replace with your server URL\n\n  constructor(private http: HttpClient, private route: Router) {\n    this.loadAuthenticationState();\n  }\n  loadAuthenticationState() {\n    const storedToken = localStorage.getItem('jwt');\n\n    if (storedToken) {\n      this.isAuthenticated = true;\n      this.accessToken = storedToken;\n      let decodedJwt: any = jwtDecode(this.accessToken);\n      this.username = decodedJwt.sub;\n      this.id = decodedJwt.userId;\n      this.roles = decodedJwt.roles;\n      this.redirectBasedOnRoles();\n    }\n  }\n\n  registerUser(username: string, password: string): Observable<any> {\n    const body = { username, password };\n    return this.http.post(`${this.baseUrl}/register`, body, { responseType: 'text' });\n  }\n\n  loginUser(username: string, password: string): Observable<any> {\n    const body = { username, password };\n    return this.http.post(`${this.baseUrl}/login`, body);\n  }\n  loadprofile(data: any) {\n    this.isAuthenticated = true;\n    this.accessToken = data['jwt'];\n    localStorage.setItem('jwt',this.accessToken)\n    let decodedJwt: any = jwtDecode(this.accessToken);\n    this.username = decodedJwt.sub;\n    this.id = decodedJwt.userId;\n    this.roles = decodedJwt.roles;\n    console.log(this.roles);\n    this.redirectBasedOnRoles();\n  }\n  private redirectBasedOnRoles() {\n    if (this.roles.includes(\"SUPER-ADMIN\")) {\n      this.route.navigateByUrl(\"/super-admin/home\"); // Navigate to admin's home\n    } else if (this.roles.includes(\"USER\")) {\n      this.route.navigateByUrl(\"/user/home\"); // Navigate to user's home\n    } else if (this.roles.includes(\"ADMIN\")) {\n      this.route.navigateByUrl(\"/admin/home\"); // Navigate to user's home\n    } else if (this.roles.includes(\"ORGANIZER\")) {\n      this.route.navigateByUrl(\"/organizer/home\"); // Navigate to user's home\n    } else {\n      this.route.navigateByUrl(\"/guest\"); // Navigate to a default route (for other roles)\n    }\n  }\n\n  logout() {\n    this.isAuthenticated = false;\n    this.accessToken = \"\";\n    this.username = \"\";\n    this.roles = \"\";\n    localStorage.removeItem('jwt'); // Remove the JWT token from local storage\n    this.route.navigateByUrl('/login'); // Redirect to the login page\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}