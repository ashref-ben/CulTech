{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (localStorage.getItem('jwt') !== \"\") {\n      return true;\n    } else {\n      this.router.navigateByUrl(\"/login\");\n      return false;\n    }\n  }\n}\nAuthenticationGuard.ɵfac = function AuthenticationGuard_Factory(t) {\n  return new (t || AuthenticationGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthenticationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationGuard,\n  factory: AuthenticationGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,mBAAmB;EAC9BC,YAAoBC,WAAwB,EAASC,MAAa;IAA9C,gBAAW,GAAXD,WAAW;IAAsB,WAAM,GAANC,MAAM;EAE3D;EAEAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,IAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,KAAG,EAAE,EAAC;MAClC,OAAO,IAAI;KACZ,MAAI;MACH,IAAI,CAACL,MAAM,CAACM,aAAa,CAAC,QAAQ,CAAC;MACnC,OAAO,KAAK;;EAGhB;;AAfWT,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAU,SAAnBV,mBAAmB;EAAAW,YAFlB;AAAM","names":["AuthenticationGuard","constructor","authService","router","canActivate","route","state","localStorage","getItem","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\labid\\Downloads\\CulTech-master\\CulTech-master\\Front\\src\\app\\guards\\authentication.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AuthService} from \"../Services/auth.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private authService: AuthService,private router:Router ) {\n\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if(localStorage.getItem('jwt')!==\"\"){\n      return true;\n    }else{\n      this.router.navigateByUrl(\"/login\")\n      return false\n    }\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}