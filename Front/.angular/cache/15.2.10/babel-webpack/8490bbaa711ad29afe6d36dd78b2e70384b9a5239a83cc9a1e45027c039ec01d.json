{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/auth.service\";\nexport class AppHttpInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    if (!request.url.includes(\"auth/login\")) {\n      let newreq = request.clone({\n        headers: request.headers.set('Authorization', `Bearer${localStorage.getItem('jwt')}`)\n      });\n      return next.handle(newreq);\n    } else return next.handle(request);\n  }\n}\nAppHttpInterceptor.ɵfac = function AppHttpInterceptor_Factory(t) {\n  return new (t || AppHttpInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAppHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppHttpInterceptor,\n  factory: AppHttpInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,kBAAkB;EAE7BC,YAAoBC,WAAyB;IAAzB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAG,CAACD,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,YAAY,CAAC,EACtC;MACE,IAAIC,MAAM,GAAGJ,OAAO,CAACK,KAAK,CAAC;QACzBC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC,SAASC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE;OACpF,CAAC;MACF,OAAOR,IAAI,CAACS,MAAM,CAACN,MAAM,CAAC;KAC3B,MAAK,OAAQH,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC;EACpC;;AAZWJ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAe,SAAlBf,kBAAkB;AAAA","names":["AppHttpInterceptor","constructor","authService","intercept","request","next","url","includes","newreq","clone","headers","set","localStorage","getItem","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\labid\\Downloads\\CulTech-master\\CulTech-master\\Front\\src\\app\\Interceptors\\app-http.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {AuthService} from \"../Services/auth.service\";\n\n@Injectable()\nexport class AppHttpInterceptor implements HttpInterceptor {\n\n  constructor(private authService : AuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if(!request.url.includes(\"auth/login\"))\n    {\n      let newreq = request.clone({\n        headers: request.headers.set('Authorization',`Bearer${localStorage.getItem('jwt')}`)\n      })\n      return next.handle(newreq);\n    }else return  next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}